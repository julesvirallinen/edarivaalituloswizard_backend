{"version":3,"sources":["Components/ElectionData.js","Components/MenuButtons.js","Components/ViewSingleCandidate.js","Components/FilterForm.js","Components/TopCandidates.js","App.js","index.js"],"names":["ViewCandidate","candidate","setCurrentCandidate","candidateName","name","replace","includes","split","nameParts","className","onClick","value","seats","InfoCard","votes","candidates","Badge","color","ViewGroup","group","filter","useState","isOpen","setIsOpen","candidateCount","children","length","style","marginTop","Card","CardHeader","Collapse","CardBody","map","toLowerCase","key","ViewCoalition","coalition","forEach","child","JSON","stringify","ElectionData","candidateData","undefined","MenuButtons","setCurrent","current","options","yearStyle","year","ViewSingleCandidate","currentCandidate","nicknames","Array","from","Set","years","nickname","Boolean","formatNicknames","item","index","totalVotes","times","elected","FilterForm","setFilter","Form","Input","type","placeholder","onChange","event","target","marginBottom","GroupBadge","groupName","badgeStyle","backgroundColor","tsempp","studo","nation","stud","codtho","agrof","sitvas","hyvi","kok","maltil","osy","sd","lks","help1","help2","help3","eky","ekyyfk","pykälä","kumpu","viikki","valt","human","teol","penger","käytt","ps","peruss","kesk","DisplayTopCandidate","setting","groupBadges","Math","round","DisplayTopCandidates","TopCandidates","setSetting","candidateList","Object","values","sortedCandidateList","sort","a","b","slice","c","App","yearlyData","setYearlyData","currentYear","setCurrentYear","setCandidateData","currentPage","setCurrentPage","useEffect","axios","get","then","response","data","menuOptions","keys","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3dfa947.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Collapse, Badge, CardBody, Card, CardHeader } from 'reactstrap'\n\nconst ViewCandidate = ({ candidate, setCurrentCandidate }) => {\n  var candidateName = candidate.name.replace(/\\s/g, '')\n//   var nickname = ''\n  if (candidateName.includes(\"'\")) {\n    // nickname = candidateName.split(\"'\")[1].split(\"'\")[0]\n    candidateName = candidateName.split(\"'\")[0]\n  }\n  const nameParts = candidateName.split(',')\n  candidateName = `${nameParts[1]} ${nameParts[0]}`\n\n  return (\n    <div>\n      <span className=\"candidate\" onClick={() => setCurrentCandidate(candidateName)}>\n        {candidateName} / {candidate.value} {candidate.seats ? '/ ★' : ''}\n      </span>\n    </div>\n  )\n}\n\nconst InfoCard = ({ votes, candidates }) => {\n  return (\n    <div className=\"statBox\">\n      <span>\n      🗳️:<Badge color=\"default\">{votes}</Badge> \n        {candidates ? <span>👤:<Badge color=\"default\">{candidates}</Badge></span> : ''}\n      </span>\n    </div>\n  )\n}\n\nconst ViewGroup = ({ group, setCurrentCandidate, filter }) => {\n  const [isOpen, setIsOpen] = useState(true)\n  const toggle = () => setIsOpen(!isOpen)\n\n  const divStyle = {\n    marginTop: '5px',\n    // padding: '5px'\n  }\n\n  const cardStyle = {\n    display: 'inline-block',\n    padding: '5px',\n    marginLeft: '20px',\n  }\n\n  const candidateCount = group.children.length\n\n  return (\n    <div style={divStyle}>\n      <Card>\n        <CardHeader onClick={() => toggle()}>\n          <b>\n            {group.name} <Badge color=\"default\">{group.seats}</Badge>\n          </b>\n          <InfoCard votes={group.value} candidates={candidateCount}/>\n        </CardHeader>\n        <Collapse isOpen={isOpen}>\n          <CardBody>\n            {group.children.map(candidate =>\n              candidate.name.toLowerCase().includes(filter) ? (\n                <ViewCandidate\n                  candidate={candidate}\n                  key={candidate.name}\n                  setCurrentCandidate={setCurrentCandidate}\n                />\n              ) : (\n                ''\n              ),\n            )}\n          </CardBody>\n        </Collapse>\n      </Card>\n    </div>\n  )\n}\n\nconst ViewCoalition = ({ coalition, setCurrentCandidate, filter }) => {\n  const [isOpen, setIsOpen] = useState(true)\n\n  const toggle = () => setIsOpen(!isOpen)\n\n  var candidateCount = 0\n  coalition.children.forEach(child => (candidateCount+=child.children.length))\n\n  const divStyle = {\n    marginTop: '10px',\n  }\n\n  const cardStyle = {\n    display: 'inline-block',\n    padding: '5px',\n    marginLeft: '20px',\n  }\n\n  return (\n    <div style={divStyle}>\n      <Card>\n        <CardHeader onClick={() => toggle()}>\n          <b>\n            {coalition.name} <Badge color=\"default\">{coalition.seats}</Badge>\n          </b>\n          <InfoCard votes={coalition.value} candidates={candidateCount}/>\n        </CardHeader>\n        <Collapse isOpen={isOpen}>\n          <CardBody>\n            {coalition.children.map(group =>\n              JSON.stringify(group)\n                .toLowerCase()\n                .includes(filter) ? (\n                <ViewGroup\n                  group={group}\n                  key={group.name}\n                  setCurrentCandidate={setCurrentCandidate}\n                  filter={group.name.toLowerCase().includes(filter) ? '' : filter}\n                />\n              ) : (\n                ''\n              ),\n            )}\n          </CardBody>\n        </Collapse>\n      </Card>\n    </div>\n  )\n}\n\nconst ElectionData = ({ candidateData, setCurrentCandidate, filter }) => {\n    \n  if (candidateData === undefined) return ''\n\n  return (\n    <>\n      {candidateData.children.map(coalition =>\n        JSON.stringify(coalition)\n          .toLowerCase()\n          .includes(filter) ? (\n          <ViewCoalition\n            coalition={coalition}\n            key={coalition.name}\n            setCurrentCandidate={setCurrentCandidate}\n            filter={coalition.name.toLowerCase().includes(filter) ? '' : filter}\n          />\n        ) : (\n          ''\n        ),\n      )}\n    </>\n  )\n}\n\nexport default ElectionData\n","import React from 'react'\n\nconst MenuButtons = ({ setCurrent, current, options }) => {\n  const yearStyle = {\n    color: 'gray',\n  }\n\n  return (\n    <h1>\n      {options.map(year => (\n        <span\n          style={current != year ? yearStyle : undefined}\n          key={year}\n          onClick={() => setCurrent(year)}\n        >\n          {' '}\n          {year}\n        </span>\n      ))}\n    </h1>\n  )\n}\n\nexport default MenuButtons\n","import React from 'react'\n\nconst ViewSingleCandidate = ({ currentCandidate, candidate, setCurrentCandidate }) => {\n  if (candidate === undefined) return ''\n  const nicknames = Array.from(new Set(candidate.years.map(year => year.nickname))).filter(Boolean)\n  const formatNicknames = nicknames.map((item, index) => (index ? ', ' : '') + item)\n  return (\n    <div>\n      <h1>{currentCandidate}</h1>\n      {nicknames.length!==0 ? <h2>({formatNicknames})</h2> : ''}\n      Total votes: {candidate.totalVotes} <br />\n      Times up for election: {candidate.times}\n      {candidate.years.map(year => (\n        <div key={year.year}>\n          <b>{year.year} </b>\n          votes: {year.votes} {year.elected ? '/ ★' : ''} ({year.coalition}/{year.group})\n          <br />\n        </div>\n      ))}\n      <button onClick={() => setCurrentCandidate('')}>Return </button>\n    </div>\n  )\n}\n\nexport default ViewSingleCandidate\n","import React from 'react'\nimport { Form, Input } from 'reactstrap'\n\nconst FilterForm = ({ filter, setFilter }) => {\n  const handleDataChange = event => {\n    setFilter(event.target.value.toLowerCase())\n  }\n\n  const InputField = {\n    marginBottom: '10px',\n  }\n\n  return (\n    <Form>\n      <Input\n        type=\"text\"\n        placeholder=\"Try 'snäf', 'osy' or 'lauri'\"\n        value={filter}\n        onChange={handleDataChange}\n        style={InputField}\n      />\n    </Form>\n  )\n}\n\nexport default FilterForm\n","import React, { useState } from 'react'\nimport MenuButtons from './MenuButtons'\nimport FilterForm from './FilterForm'\nimport { Badge } from 'reactstrap'\n\nconst GroupBadge = ({ groupName }) => {\n  const groupColors = {\n    tsempp: 'lightblue',\n    studo: 'lightgreen',\n    nation: 'lightgreen',\n    stud: 'lightgreen',\n    codtho: 'lightgreen',\n    'ämnesf': 'lightgreen',\n    agrof:'lightgreen',\n    sitvas: 'red',\n    hyvi: 'green',\n    kok: 'blue',\n    maltil:'blue',\n    osy: 'lightcoral',\n    sd: 'lightcoral',\n    lks: 'orange',\n    help1: 'orange',\n    help2: 'orange',\n    help3: 'orange',\n    eky: 'orange',\n    ekyyfk: 'orange',\n    pykälä: 'orange',\n    '(h)lks': 'orange',\n    'lks/hl': 'orange',\n    'viik-n': 'purple',\n    kumpu: 'purple',\n    viikki: 'purple',\n    valt: 'purple',\n    human: 'purple',\n    teol: 'purple',\n    penger: 'purple',\n    käytt: 'purple',\n    ps: '#856404',\n    peruss: '#856404',\n    'kesk.': 'yellow',\n    kesk: 'yellow'\n\n  }\n\n  const badgeStyle = {\n    backgroundColor: groupColors[groupName],\n  }\n  return (\n    <>\n      <Badge style={badgeStyle}>{groupName}</Badge>\n      {'   '}\n    </>\n  )\n}\n\nconst DisplayTopCandidate = ({ candidate, index, setCurrentCandidate, setting }) => {\n  const groups = Array.from(new Set(candidate.years.map(year => year.group.toLowerCase())))\n  const groupBadges = groups.map(group => (\n    <GroupBadge groupName={group} key={group + candidate.name} />\n  ))\n  return (\n    <div>\n      <span\n        className=\"candidate\"\n        key={candidate.name}\n        onClick={() => setCurrentCandidate(candidate.name)}\n      >\n        {index + 1}. {candidate.name}\n        {'  '}\n        {groupBadges}\n        {setting === 'top votes' ? (\n          <span>\n            <b>{candidate.totalVotes}</b> <i>{candidate.times}x</i>\n          </span>\n        ) : (\n          <span>\n            {candidate.totalVotes}/<i>{candidate.times}</i> ={' '}\n            <b>{Math.round(candidate.totalVotes / candidate.times)}</b>\n          </span>\n        )}\n        <br />\n      </span>\n    </div>\n  )\n}\n\nconst DisplayTopCandidates = ({ candidates, setting, filter, setCurrentCandidate }) => {\n  return (\n    <div>\n      {candidates.map((candidate, index) =>\n        JSON.stringify(candidate)\n          .toLowerCase()\n          .includes(filter) ? (\n          <DisplayTopCandidate\n            candidate={candidate}\n            index={index}\n            setCurrentCandidate={setCurrentCandidate}\n            setting={setting}\n            key={candidate.name}\n          />\n        ) : (\n          ''\n        ),\n      )}\n    </div>\n  )\n}\n\nconst TopCandidates = ({ candidateData, setCurrentCandidate, filter, setFilter }) => {\n  const [setting, setSetting] = useState('top votes')\n  const settings = ['top votes', 'best average']\n\n  const candidateList = Object.values(candidateData)\n  function compare(a, b) {\n    return b.totalVotes - a.totalVotes\n  }\n\n  function compareByElection(a, b) {\n    return b.totalVotes / b.times - a.totalVotes / a.times\n  }\n  var sortedCandidateList = candidateList\n  if (setting === 'top votes') {\n    sortedCandidateList = candidateList.sort(compare).slice(0, 600)\n  } else {\n    sortedCandidateList = candidateList\n      .sort(compareByElection)\n      .filter(c => c.times > 1)\n      .slice(0, 300)\n  }\n\n  return (\n    <div>\n      <MenuButtons current={setting} setCurrent={setSetting} options={settings} />\n      <FilterForm filter={filter} setFilter={setFilter} />\n\n      <DisplayTopCandidates\n        candidates={sortedCandidateList}\n        setting={setting}\n        filter={filter}\n        setCurrentCandidate={setCurrentCandidate}\n      />\n    </div>\n  )\n}\n\nexport default TopCandidates\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport ElectionData from './Components/ElectionData'\nimport MenuButtons from './Components/MenuButtons'\nimport ViewSingleCandidate from './Components/ViewSingleCandidate'\nimport TopCandidates from './Components/TopCandidates'\nimport FilterForm from './Components/FilterForm'\n\nfunction App() {\n  const [yearlyData, setYearlyData] = useState({})\n  const [currentYear, setCurrentYear] = useState(2018)\n  const [candidateData, setCandidateData] = useState({})\n  const [currentCandidate, setCurrentCandidate] = useState('')\n  const [currentPage, setCurrentPage] = useState('top candidates')\n  const [filter, setFilter] = useState('')\n\n  useEffect(() => {\n    axios.get('/api/sample').then(response => {\n      setYearlyData(response.data)\n    })\n  }, [])\n\n  useEffect(() => {\n    axios.get('/api/candidate').then(response => {\n      setCandidateData(response.data)\n    })\n  }, [])\n\n  const menuOptions = ['yearly', 'top candidates']\n\n  if (currentCandidate !== '') {\n    return (\n      <div>\n        <ViewSingleCandidate\n          currentCandidate={currentCandidate}\n          candidate={candidateData[currentCandidate]}\n          setCurrentCandidate={setCurrentCandidate}\n        />\n      </div>\n    )\n  }\n  if (currentPage === 'yearly') {\n    return (\n      <div>\n        <MenuButtons\n          setCurrent={setCurrentPage}\n          current={currentPage}\n          options={menuOptions}\n        />\n        <MenuButtons\n          setCurrent={setCurrentYear}\n          current={currentYear}\n          options={Object.keys(yearlyData)}\n        />\n        <FilterForm filter={filter} setFilter={setFilter} />\n\n        <ElectionData\n          candidateData={yearlyData[currentYear]}\n          setCurrentCandidate={setCurrentCandidate}\n          filter={filter}\n        />\n      </div>\n    )\n  }\n\n  if (currentPage === 'top candidates') {\n    return (\n      <div>\n        <MenuButtons\n          setCurrent={setCurrentPage}\n          current={currentPage}\n          options={menuOptions}\n        />\n\n        <TopCandidates\n          candidateData={candidateData}\n          setCurrentCandidate={setCurrentCandidate}\n          filter={filter}\n          setFilter={setFilter}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}